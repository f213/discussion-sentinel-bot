---
name: CI
on: push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version-file: ".python-version"

      - uses: actions/cache@v3
        with:
          path: |
            venv
          key: ${{ runner.os }}-venv-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/*requirements.txt') }}

      - name: Install dependencies
        if: steps.cache-primes.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install --upgrade pip pip-tools
          pip-sync requirements.txt dev-requirements.txt

      - name: Run the linter
        run: |
          . venv/bin/activate
          make lint

  test:
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.9-alpine
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version-file: '.python-version'

      - uses: actions/cache@v3
        with:
          path: |
            venv
          key: ${{ runner.os }}-venv-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/*requirements.txt') }}

      - name: Run the tests
        env:
          DATABASE_URL: postgres://postgres@localhost:5432/postgres
        run: |
          . venv/bin/activate
          make test

  build-docker-image:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version-file: '.python-version'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Generate image identifier
        id: image
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.repository }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{ github.ref == 'refs/heads/master' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/master' }}
          tags: |
            ghcr.io/${{ steps.image.outputs.lowercase }}:latest
            ghcr.io/${{ steps.image.outputs.lowercase }}:${{ github.sha }}
          build-args: |
            PYTHON_VERSION=${{ steps.setup-python.outputs.python-version }}

  deploy:
    needs: build-docker-image
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    steps:
      - name: Read image identifiers
        id: image
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.repository }}

      - name: Update the image
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: circle
          key: ${{ secrets.DEPLOY_KEY }}
          script: docker service update telegram_antispam --image ghcr.io/${{ steps.image.outputs.lowercase }}:${{ github.sha }} --with-registry-auth
